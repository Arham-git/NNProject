$date
	Sun Apr 30 17:06:37 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module FloatAS_tb $end
$var wire 32 ! c [31:0] $end
$var reg 32 " a [31:0] $end
$var reg 32 # b [31:0] $end
$var reg 1 $ sbar $end
$scope module uut $end
$var wire 1 $ AddBar_Sub $end
$var wire 32 % a [31:0] $end
$var wire 32 & b [31:0] $end
$var wire 25 ' subtraction_diff [24:0] $end
$var wire 31 ( sub_diff [30:0] $end
$var wire 32 ) result [31:0] $end
$var wire 1 * perform $end
$var wire 1 + output_sign $end
$var wire 1 , operation_sub_addBar $end
$var wire 32 - operand_b [31:0] $end
$var wire 32 . operand_a [31:0] $end
$var wire 24 / mantissa_sub_complement [23:0] $end
$var wire 25 0 mantissa_sub [24:0] $end
$var wire 24 1 mantissa_b_add_sub [23:0] $end
$var wire 24 2 mantissa_b [23:0] $end
$var wire 25 3 mantissa_add [24:0] $end
$var wire 24 4 mantissa_a [23:0] $end
$var wire 8 5 exponent_sub [7:0] $end
$var wire 8 6 exponent_diff [7:0] $end
$var wire 8 7 exponent_b_add_sub [7:0] $end
$var wire 1 8 exp_b $end
$var wire 1 9 exp_a $end
$var wire 31 : add_sum [30:0] $end
$var wire 1 ; Comp_enable $end
$scope module pe $end
$var wire 8 < Exponent_a [7:0] $end
$var wire 25 = mantissa [24:0] $end
$var wire 8 > Exponent_sub [7:0] $end
$var reg 25 ? Mantissa [24:0] $end
$var reg 5 @ shift [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 @
b1100000000000000000000000 ?
b1111111 >
b100000000000000000000000 =
b1111111 <
0;
b1000000000000000000000000000000 :
19
18
b1111111 7
b0 6
b1111111 5
b100000000000000000000000 4
b1000000000000000000000000 3
b100000000000000000000000 2
b100000000000000000000000 1
b100000000000000000000000 0
b0 /
b111111100000000000000000000000 .
b111111100000000000000000000000 -
1,
0+
1*
b1000000000000000000000000000000 )
b111111100000000000000000000000 (
b1100000000000000000000000 '
b111111100000000000000000000000 &
b111111100000000000000000000000 %
0$
b111111100000000000000000000000 #
b111111100000000000000000000000 "
b1000000000000000000000000000000 !
$end
#5
b1000001001000000000000000000000 !
b1000001001000000000000000000000 )
08
09
b101000000000000000000000 3
b1000001001000000000000000000000 :
1;
b1000000000000000000000 1
b10000010 7
b10 6
1*
b1000001000000000000000000000000 (
b10000010 5
b10000010 >
b10000010 <
b1000000000000000000000000000000 -
b1000001000000000000000000000000 .
b1000001000000000000000000000000 #
b1000001000000000000000000000000 &
b1000000000000000000000000000000 "
b1000000000000000000000000000000 %
#10
b1111 @
b100000000000000000000000 /
b100000000000000000000000 '
b100000000000000000000000 ?
b1000000000000000100000000 0
b1000000000000000100000000 =
0,
1+
b100000000000000100000000 4
b10111000000000000000000000000000 !
b10111000000000000000000000000000 )
18
b100000000000000000000000 2
19
b0 3
b111111100000000000000000000000 :
0;
b100000000000000000000000 1
b1111111 7
b0 6
1*
b111000000000000000000000000000 (
b1110000 5
b1110000 >
b1111111 <
b111111100000000000000000000000 -
b10111111100000000000000100000000 .
b10111111100000000000000100000000 "
b10111111100000000000000100000000 %
b111111100000000000000000000000 #
b111111100000000000000000000000 &
#15
b100001010110100110010100 3
1,
b0 @
b1011111010110011111111001 '
b1011111010110011111111001 ?
b100000101001100000000111 0
b100000101001100000000111 =
b0 /
b101101000110001101111101 2
b100000101001100000000111 4
b110101100001010110100110010100 :
b10110101100001010110100110010100 !
b10110101100001010110100110010100 )
b101101000110001101 1
b1101011 7
b110 6
1*
b110101111111010110011111111001 (
b1101011 5
b1101011 >
b1101011 <
b10110010101101000110001101111101 -
b10110101100000101001100000000111 .
b10110010101101000110001101111101 #
b10110010101101000110001101111101 &
b10110101100000101001100000000111 "
b10110101100000101001100000000111 %
#20
